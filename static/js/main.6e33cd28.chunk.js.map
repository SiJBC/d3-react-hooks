{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","svgRef","useRef","useEffect","svg","select","current","xScale","scaleLinear","domain","length","range","yScale","xAxis","axisBottom","ticks","tickFormat","index","call","style","yAxis","axisRight","myLine","line","x","d","y","curve","curveCardinal","selectAll","join","attr","ref","className","onClick","map","value","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAmEeA,MA7Df,WAAgB,IAAD,EACWC,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAK,GAAI,IAAK,KADnD,mBACNC,EADM,KACAC,EADA,KAEPC,EAASC,mBAwCf,OAvCAC,qBAAU,WACR,IAAMC,EAAMC,YAAOJ,EAAOK,SAEpBC,EAASC,cACdC,OAAO,CAAC,EAAGV,EAAKW,OAAO,IACvBC,MAAM,CAAC,EAAG,MAELC,EAASJ,cACdC,OAAO,CAAC,EAAG,MACXE,MAAM,CAAC,IAAK,IAEPE,EAAQC,YAAWP,GAAQQ,MAAMhB,EAAKW,QAAQM,YAAW,SAAAC,GAAK,OAAIA,EAAO,KAC/Eb,EAAIC,OAAO,WACVa,KAAKL,GACLM,MAAM,YAAa,oBAEpB,IAAMC,EAAQC,YAAUT,GACxBR,EAAIC,OAAO,WACVc,MAAM,YAAa,qBACnBD,KAAKE,GAGN,IAAME,EAASC,cACdC,GAAE,SAACC,EAAGR,GAAJ,OAAcV,EAAOU,MACvBS,EAAEd,GACFe,MAAMC,KAOTxB,EAAIyB,UAAU,SAAS9B,KAAK,CAACA,IAC5B+B,KAAK,QACLC,KAAK,IAAKT,GACVS,KAAK,OAAQ,QACbA,KAAK,SAAU,UACb,CAAChC,IAGF,gCACI,sBAAKiC,IAAK/B,EAAV,UACE,mBAAGgC,UAAU,WACb,mBAAGA,UAAU,cAEf,uBAEA,uBACA,uBACA,uBACA,uBACA,wBAAQC,QAAU,kBAAMlC,EAAQD,EAAKoC,KAAI,SAAAC,GAAK,OAAIA,EAAQ,OAA1D,yBACA,wBAAQF,QAAU,kBAAMlC,EAAQD,EAAKsC,QAAO,SAAAD,GAAK,OAAIA,EAAQ,QAA7D,6BCjDOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e33cd28.chunk.js","sourcesContent":["\nimport { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { select, line, curveCardinal, axisBottom, scaleLinear, axisRight } from \"d3\"\n\n\nfunction App() {\n  const [data, setData] = useState([20, 10 ,30, 45, 60 , 75, 105, 45])\n  const svgRef = useRef()\n  useEffect(() => {\n    const svg = select(svgRef.current)\n    \n    const xScale = scaleLinear()\n    .domain([0, data.length-1])\n    .range([0, 300])\n\n    const yScale = scaleLinear()\n    .domain([0, 110])\n    .range([150, 0])\n\n    const xAxis = axisBottom(xScale).ticks(data.length).tickFormat(index => index +1)\n    svg.select(\".x-axis\")\n    .call(xAxis)\n    .style(\"transform\", \"translateY(150px\")\n\n    const yAxis = axisRight(yScale)\n    svg.select(\".y-axis\")\n    .style(\"transform\", \"translateX(300px)\")\n    .call(yAxis)\n   \n\n    const myLine = line()\n    .x((d, index) => xScale(index))\n    .y(yScale)\n    .curve(curveCardinal)\n  // svg.selectAll(\"circle\")\n  //   .data(data)\n  //   .join(\"circle\").attr(\"r\", d => d)\n  //   .attr(\"cx\", d => d *2)\n  //   .attr(\"cy\", d => d *2)\n  //   .attr(\"stroke\", \"red\")\n  svg.selectAll(\".line\").data([data])\n  .join(\"path\")\n  .attr(\"d\", myLine)\n  .attr(\"fill\", \"none\")\n  .attr(\"stroke\", \"blue\")\n  }, [data])\n  \n  return (\n    <div> \n        <svg ref={svgRef}>\n          <g className=\"x-axis\"></g>\n          <g className=\"y-axis\"></g>\n        </svg>\n        <br>\n        </br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <button onClick ={() => setData(data.map(value => value + 5))}>Update Data</button>\n        <button onClick ={() => setData(data.filter(value => value < 35))}>Filter Data</button>\n    </div>\n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}